{"version":3,"sources":["components/CharacterCard/index.js","components/Wrapper/index.js","components/Grid/index.js","components/ClickStatus/index.js","components/Score/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","state","clicked","_this2","this","react_default","a","createElement","className","id","props","onClick","handleClick","alt","name","src","image","occupation","location","Component","Wrapper","children","Container","_ref","fluid","concat","Row","_ref2","Col","_ref3","size","split","map","join","ClickStatus","value","Score","score","topScore","Title","components_ClickStatus","status","components_Score","App","friends","unclickedFriends","console","log","unclicked","_this","filter","friend","length","setState","restartGame","newScore","sortCharacters","sortedFriends","sort","Math","random","Fragment","components_Title","components_Wrapper","character","components_CharacterCard","key","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af1628c7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\n\r\nclass CharacterCard extends Component {\r\n\r\n  state = {\r\n    clicked: \"false\"\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"card\" id={this.props.id} onClick={ () => {\r\n        this.props.handleClick(this.props.id);\r\n      }}>\r\n        <div className=\"img-container\">\r\n          <img\r\n            alt={this.props.name}\r\n            src={this.props.image}\r\n          />\r\n        </div>\r\n        <div className=\"content\">\r\n          <ul>\r\n            <li>\r\n              <strong>Name:</strong> {this.props.name}\r\n            </li>\r\n            <li>\r\n              <strong>Occupation:</strong> {this.props.occupation}\r\n            </li>\r\n            <li>\r\n              <strong>Location:</strong> {this.props.location}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CharacterCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\n\r\n// Exporting the Container, Row, and Col components from this file\r\n\r\n// This Container component allows us to use a bootstrap container without worrying about class names\r\nexport function Container({ fluid, children }) {\r\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Row component lets us use a bootstrap row without having to think about class names\r\nexport function Row({ fluid, children }) {\r\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\r\n}\r\n\r\n// This Col component lets us size bootstrap columns with less syntax\r\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\r\nexport function Col({ size, children }) {\r\n  return (\r\n    <div\r\n      className={size\r\n        .split(\" \")\r\n        .map(size => \"col-\" + size)\r\n        .join(\" \")}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction ClickStatus(props) {\r\n  return (\r\n    <div className=\"container text-center\">\r\n      <br></br>\r\n       <h2>{props.value}</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ClickStatus;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\n// This component lets us use a bootstrap input element without worrying about class names\r\n// or manually wrapping the input with a form-group div\r\n// All of the props passed to this component are spread onto the input element\r\nfunction Score(props) {\r\n  return (\r\n    <div className=\"container\">\r\n      <h3>Score: {props.score} </h3>\r\n      <h3>Top Score: {props.topScore} </h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Score;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport { Container, Row, Col } from \"../Grid\";\r\nimport ClickStatus from \"../ClickStatus\";\r\nimport Score from \"../Score\";\r\n\r\nfunction Title(props) {\r\n  return (\r\n    <div className=\"header\">\r\n    <Container>\r\n      <Row>\r\n        <Col size=\"md-12\"><h1>Memory Game</h1></Col>\r\n      </Row>\r\n      <Row>\r\n        <Col size=\"md-3\">\r\n          <ClickStatus value={props.status}></ClickStatus>\r\n        </Col>\r\n        <Col size=\"md-6\">\r\n          <div className=\"container text-center\">\r\n            <p>\r\n              Click on every character only once!\r\n            </p>\r\n          </div>\r\n        </Col>\r\n        <Col size=\"md-3\">\r\n          <Score score={props.score} topScore={props.topScore}></Score>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default Title;\r\n","import React, { Component } from \"react\";\nimport CharacterCard from \"./components/CharacterCard\"\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\"\nimport \"./App.css\";\n\n\nclass App extends Component {\n\n  state = {\n    friends: friends,\n    unclickedFriends: friends,\n    score: 0,\n    topScore: 0,\n    status: \"\"\n  };\n\n  handleClick = (id) => {\n    console.log(\"Clicked in apps called: \" + id);\n    const unclicked = this.state.unclickedFriends.filter(friend => friend.id !== id);\n\n    if (unclicked.length === this.state.unclickedFriends.length) {\n      //character had already been clicked - game over\n      this.setState({ status: \"Incorrect!\" });\n      this.restartGame();\n    } else {\n      //correct answer\n      let newScore = this.state.score + 1;\n      this.setState({\n        unclickedFriends: unclicked,\n        status: \"Correct!\",\n        score: newScore\n      });\n\n      //update top score if needed\n      if (newScore > this.state.topScore) {\n        this.setState({ topScore: newScore })\n      }\n      //Check if win\n      if (newScore === friends.length) {\n        this.setState({ status: \"You won!\" });\n        this.restartGame();\n      }\n    }\n    this.sortCharacters();\n  };\n\n  restartGame() {\n    this.setState({\n      score: 0,\n      unclickedFriends: friends\n    });\n    this.sortCharacters();\n  }\n\n  sortCharacters() {\n    const sortedFriends = this.state.friends.sort(() => Math.random() - 0.5);\n    this.setState({ friends: sortedFriends });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n          <Title status={this.state.status} score={this.state.score} topScore={this.state.topScore}>\n          </Title>\n\n          <Wrapper>\n            {this.state.friends.map((character) => {\n              return <CharacterCard key={character.id} id={character.id} name={character.name} image={character.image} occupation={character.occupation} location={character.location} handleClick={this.handleClick} />\n            })}\n          </Wrapper>\n\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}